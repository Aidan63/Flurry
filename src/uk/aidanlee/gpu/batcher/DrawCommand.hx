package uk.aidanlee.gpu.batcher;

import uk.aidanlee.gpu.Shader;
import uk.aidanlee.gpu.Texture;
import uk.aidanlee.gpu.geometry.Geometry;
import uk.aidanlee.maths.Matrix;
import uk.aidanlee.maths.Rectangle;
import uk.aidanlee.maths.Matrix;
import uk.aidanlee.utils.Hash;

/**
 * A draw command describes how to draw a set amount of data within a vertex buffer.
 * These commands contain the buffer range, shader, texture, viewport, etc.
 */
class DrawCommand
{
    /**
     * Hash ID for this draw command.
     * 
     * Generated by hashing the concatenated string of all the included geometries names
     */
    public final id : Int;

    /**
     * If this draw command is unchanging.
     */
    public final unchanging : Bool;

    /**
     * The start index of the data drawn by this command.
     */
    public final bufferStartIndex : Int;

    /**
     * The end index of the data drawn by this command.
     */
    public final bufferEndIndex : Int;

    /**
     * Number of vertices within this buffer range.
     */
    public final vertices : Int;

    /**
     * Projection matrix to draw this command with.
     */
    public final projection : Matrix;

    /**
     * View matrix to draw this command with.
     */
    public final view : Matrix;

    /**
     * Viewport for this draw command.
     */
    public final viewport : Rectangle;

    /**
     * Primitive type of this draw command.
     */
    public final primitive : PrimitiveType;

    /**
     * The render target for this draw command.
     */
    public final target : IRenderTarget;

    /**
     * Shader to be used to draw this data.
     */
    public final shader : Shader;

    /**
     * Textures (if any) to draw with this data.
     */
    public final textures : Array<Texture>;

    /**
     * Clipping rectangle.
     */
    public final clip : Rectangle;

    /**
     * If blending is enabled for this draw command.
     */
    public final blending : Bool;

    public final srcRGB : BlendMode;

    public final dstRGB : BlendMode;

    public final srcAlpha : BlendMode;

    public final dstAlpha : BlendMode;

    inline public function new(
        _name       : String,
        _unchanging : Bool,
        _startIdx   : Int,
        _endIdx     : Int,
        _vertices   : Int,
        _projection : Matrix,
        _view       : Matrix,
        _viewport   : Rectangle,
        _primitive  : PrimitiveType,
        _target     : IRenderTarget,
        _shader     : Shader,
        _textures   : Array<Texture>,
        _clip       : Rectangle,
        _blending   : Bool,
        _srcRGB     : BlendMode = null,
        _dstRGB     : BlendMode = null,
        _srcAlpha   : BlendMode = null,
        _dstAlpha   : BlendMode = null
    )
    {
        id = Hash.hash(_name);

        unchanging       = _unchanging;
        bufferStartIndex = _startIdx;
        bufferEndIndex   = _endIdx;
        vertices         = _vertices;

        projection = _projection;
        view       = _view;

        viewport  = _viewport;
        primitive = _primitive;
        target    = _target;
        shader    = _shader;
        textures  = _textures;
        clip      = _clip;
        blending  = _blending;
        srcRGB    = _srcRGB;
        dstRGB    = _dstRGB;
        srcAlpha  = _srcAlpha;
        dstAlpha  = _dstAlpha;
    }
}
