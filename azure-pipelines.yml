strategy:
  matrix:
    linux:
      imageName: 'ubuntu-latest'
    mac:
      imageName: 'macos-latest'
    windows:
      imageName: 'windows-latest'

pool:
  vmImage: $(imageName)

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '10.15.x'

- bash: |
    chmod a+x ci/install.sh
    ci/install.sh
  displayName: Install Dependencies
  workingDirectory: $(Build.SourcesDirectory)
  env:
    AGENT_OS: $(Agent.OS)

- bash: |
    chmod a+x ci/test_engine.sh
    ci/test_engine.sh
  displayName: Engine Tests
  workingDirectory: $(Build.SourcesDirectory)
  env:
    AGENT_OS: $(Agent.OS)

# - bash: |
#     chmod a+x ci/test_system.sh
#     ci/test_system.sh
#   displayName: System Tests
#   condition: eq( variables['Agent.OS'], 'Linux' )
#   workingDirectory: $(Build.SourcesDirectory)
#   env:
#     AGENT_OS: $(Agent.OS)

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFormat: xUnit
    testResultsFiles: test-engine.xml
    searchFolder: $(Build.SourcesDirectory)/tests/unit
    testRunTitle: Engine Tests $(Agent.OS)
    buildPlatform: $(Agent.OS)
    failTaskOnFailedTests: true

# - task: PublishTestResults@2
#   condition: and(succeededOrFailed(), eq( variables['Agent.OS'], 'Linux' ))
#   inputs:
#     testResultsFormat: xUnit
#     searchFolder: $(Build.SourcesDirectory)/tests/system
#     testResultsFiles: test-engine.xml
#     testRunTitle: System Tests $(Agent.OS)
#     buildPlatform: $(Agent.OS)
#     failTaskOnFailedTests: true