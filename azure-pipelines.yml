variables:
  GDX_PACKER_JAR: $(Build.SourcesDirectory)/runnable-texturepacker.jar

jobs:
  - job: CppUnitTests
    displayName: C++ Unit Tests
    strategy:
      matrix:
        linux:
          imageName: 'ubuntu-latest'
        mac:
          imageName: 'macos-latest'
        windows:
          imageName: 'windows-latest'
    pool:
      vmImage: $(imageName)
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '10.15.x'
    - bash: ci/install.sh
      displayName: Install Dependencies
      workingDirectory: $(Build.SourcesDirectory)
      env:
        AGENT_OS: $(Agent.OS)
    - bash: |
        npx haxe build-cpp.hxml -D reporter=buddy.reporting.XUnit2Reporter -D report-name=Engine-Tests-$(Agent.OS) --debug --no-traces
        ./bin/cpp/Tests-debug
      displayName: Engine Tests
      workingDirectory: $(Build.SourcesDirectory)/tests/unit
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: xUnit
        testResultsFiles: Engine-Tests-$(Agent.OS).xml
        searchFolder: $(Build.SourcesDirectory)/tests/unit
        testRunTitle: Engine Tests $(Agent.OS)
        buildPlatform: $(Agent.OS)
        failTaskOnFailedTests: true

  - job: JsUnitTests
    displayName: Js Unit Tests
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '10.15.x'
    - bash: ci/install.sh
      displayName: Install Dependencies
      workingDirectory: $(Build.SourcesDirectory)
      env:
        AGENT_OS: $(Agent.OS)
    - bash: |
        npx haxe build-js.hxml -D reporter=buddy.reporting.XUnit2Reporter -D report-name=Engine-Tests-Js --debug --no-traces
        node bin/js/main.js
      displayName: Engine Tests
      workingDirectory: $(Build.SourcesDirectory)/tests/unit
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: xUnit
        testResultsFiles: Engine-Tests-Js.xml
        searchFolder: $(Build.SourcesDirectory)/tests/unit
        testRunTitle: Engine Tests Js
        buildPlatform: Js
        failTaskOnFailedTests: true

  - job: HashlinkUnitTests
    displayName: Hashlink Unit Tests
    pool:
      vmImage: 'windows-latest'
    steps:
    - bash: ci/install.sh
      displayName: Install Dependencies
      workingDirectory: $(Build.SourcesDirectory)
      env:
        AGENT_OS: $(Agent.OS)
    - bash: |
        curl https://github.com/HaxeFoundation/hashlink/releases/download/1.11/hl-1.11.0-win.zip -O -J -L -o hl-1.11.0-win.zip
        unzip hl-1.11.0-win.zip
        export PATH=$PWD/hl-1.11.0-win:$PATH
        npx haxe build-hl.hxml -D reporter=buddy.reporting.XUnit2Reporter -D report-name=Engine-Tests-Hashlink --debug --no-traces
        hl bin/hl/main.hl
      displayName: Engine Tests Hashlink
      workingDirectory: $(Build.SourcesDirectory)/tests/unit
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: xUnit
        testResultsFiles: Engine-Tests-Hashlink.xml
        searchFolder: $(Build.SourcesDirectory)/tests/unit
        testRunTitle: Engine Tests Hashlink
        buildPlatform: Hashlink
        failTaskOnFailedTests: true

  - job: ToolUnitTests
    displayName: Tool Unit Tests
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '10.15.x'
    - bash: ci/install.sh
      displayName: Install Dependencies
      workingDirectory: $(Build.SourcesDirectory)
      env:
        AGENT_OS: $(Agent.OS)
    - bash: npx haxe build.hxml -D reporter=buddy.reporting.XUnit2Reporter -D report-name=Tool-Tests --debug --no-traces
      displayName: Tool Unit Tests
      workingDirectory: $(Build.SourcesDirectory)/tests/tool
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: xUnit
        testResultsFiles: Tool-Tests.xml
        searchFolder: $(Build.SourcesDirectory)/tests/tool
        testRunTitle: Tool Unit Tests
        failTaskOnFailedTests: true

  - job: SystemTestsOgl3
    displayName: System Tests (OpenGL 3 Backend)
    pool:
      name: Default
      demands:
        - Agent.OS -equals Linux
    steps:
    - bash: ci/install.sh
      displayName: Install Dependencies
      workingDirectory: $(Build.SourcesDirectory)
      env:
        AGENT_OS: $(Agent.OS)
    - bash: |       
        pip3 install -U pytest
        pip3 install -U pytest-subtests
        python3 -m pytest -o junit_family=xunit2 --junit-xml test-system.xml -s Test.py
      displayName: System Tests
      workingDirectory: $(Build.SourcesDirectory)/tests/system
      env:
        AGENT_OS: $(Agent.OS)
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: JUnit
        testResultsFiles: test-system.xml
        searchFolder: $(Build.SourcesDirectory)/tests/system
        testRunTitle: System Tests $(Agent.OS)
        buildPlatform: $(Agent.OS)
        failTaskOnFailedTests: true
